<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>about me</title>
    <url>/2020/07/27/about-me/</url>
    <content><![CDATA[<p>Welcome to Alex’s blog! </p>
<p>I am a novice in programming who fond of Python, analysis of data and love Crayon Shin-chan. </p>
<p>You can email me by <a href="mailto:wdvfc@qq.com">wdvfc@qq.com</a> or contact me in GitHub(username:andingzhu) when you have any question or need talk to me.</p>
]]></content>
  </entry>
  <entry>
    <title>python历史介绍</title>
    <url>/2020/07/28/Python%E5%8E%86%E5%8F%B2%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="1-Python介绍"><a href="#1-Python介绍" class="headerlink" title="1 Python介绍"></a>1 Python介绍</h1><h2 id="1-1-计算机介绍"><a href="#1-1-计算机介绍" class="headerlink" title="1.1 计算机介绍"></a>1.1 计算机介绍</h2><ol>
<li><p>计算机的组成</p>
<p>​    计算机由硬件系统和软件系统组成，以下分别介绍：</p>
<ul>
<li>硬件系统由主机部分（中央处理器和内存储器）和外设部分（输入设备、输出设备和外存储器）组成</li>
<li>软件系统由系统软件（操作系统、驱动程序、语言处理程序、数据库管理系统等）和应用软件（浏览器、文本编辑器、音视频播放器等）</li>
</ul>
</li>
</ol>
<h2 id="1-2-汇编语言介绍"><a href="#1-2-汇编语言介绍" class="headerlink" title="1.2 汇编语言介绍"></a>1.2 汇编语言介绍</h2><ul>
<li><p>汇编语言是人与计算机进行交流的语言。</p>
</li>
<li><p>汇编语言分为编译型语言和解释型语言。</p>
</li>
</ul>
<h2 id="1-3-python历史介绍"><a href="#1-3-python历史介绍" class="headerlink" title="1.3 python历史介绍"></a>1.3 python历史介绍</h2><p>python是一门解释型语言。python的作者是Guido von Rossum（吉多 ·范 ·罗苏姆）。1989年圣诞节期间，吉多开始写python语言的编译器。1991年第一个python解释器诞生。</p>
<ol>
<li>关键点常识<ul>
<li>python是从ABC发展起来，并且结合了Unix shell和C语言的习惯。</li>
<li>python的解释器如今有多个语言实现。</li>
<li>python有目前两个版本，python2 和 python3.</li>
</ul>
</li>
<li>python的优缺点<ul>
<li>优点：简单易学、免费开源、可移植性、面向对象、可扩展性、规范的代码、高层语言、解释型语言、丰富的库。</li>
<li>缺点：执行效率慢，但随着计算的性能越来越强大，这个缺点也逐渐改善。</li>
</ul>
</li>
<li>python的应用场景<ul>
<li>web应用开发</li>
<li>操作系统管理、服务器运维的自动化脚本</li>
<li>网络爬虫</li>
<li>科学计算</li>
<li>桌面软件</li>
<li>服务器软件（网络软件）</li>
<li>游戏</li>
</ul>
</li>
<li>本文使用的python开发工具：pycharm</li>
</ol>
<h2 id="1-4-注释的使用"><a href="#1-4-注释的使用" class="headerlink" title="1.4 注释的使用"></a>1.4 注释的使用</h2><p>python支持单行注释和多行注释。</p>
<ul>
<li><p>以<strong>#</strong>开头，<strong>#</strong>右边的所有内容当作说明，并不真正执行，起辅助说明作用。</p>
</li>
<li><p>以<strong>‘’‘</strong>开始，以<strong>‘’‘</strong>结尾，是多行注释。</p>
</li>
</ul>
<h2 id="1-5-变量以及数据类型"><a href="#1-5-变量以及数据类型" class="headerlink" title="1.5 变量以及数据类型"></a>1.5 变量以及数据类型</h2><ol>
<li><p>变量的定义</p>
<ul>
<li><p>变量定义的语法： <code>变量名 = 变量值</code></p>
</li>
<li><p>变量定义后可以使用变量名来访问变量值</p>
</li>
</ul>
</li>
<li><p>变量的类型</p>
<p><img src="../images/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt=""></p>
</li>
<li><p>查看数据类型</p>
<p>在python里，只要定义了一个变量，而且它有数据，那么他的类型就已经确定了，不行要主动说明它的数据类型，系统会自动识别。“变量没有类型，数据才有类型”。</p>
</li>
</ol>
<h2 id="1-6-标识符和关键字"><a href="#1-6-标识符和关键字" class="headerlink" title="1.6 标识符和关键字"></a>1.6 标识符和关键字</h2><h3 id="1-6-1-标识符"><a href="#1-6-1-标识符" class="headerlink" title="1.6.1 标识符"></a>1.6.1 标识符</h3><p>标识符是用户编程时使用的名字，用于给变量、常量、函数、语句等命名，以建立起名称与使用之间的关系。</p>
<p>命名规则：</p>
<ol>
<li>标识符由字母、数字、下划线组成，并且不能以数字开头</li>
<li>严格区分大小写</li>
<li>不能使用关键字</li>
</ol>
<p>命名规范：</p>
<ol>
<li>标识符要见名知意</li>
<li>遵守一定的命名规范<ul>
<li>驼峰命名法</li>
<li>python推荐的_命名法</li>
</ul>
</li>
</ol>
<h3 id="1-6-2-关键字"><a href="#1-6-2-关键字" class="headerlink" title="1.6.2 关键字"></a>1.6.2 关键字</h3><p>关键字，已经被python官方使用，不允许开发者自己定义和关键字同名的标识符。</p>
<h2 id="1-7-输出语句"><a href="#1-7-输出语句" class="headerlink" title="1.7 输出语句"></a>1.7 输出语句</h2><ul>
<li>普通的输出：在python中我们使用print函数进行数据的输出</li>
<li>格式化输出：在print输出语句中，使用了%这样的操作符，就是python中的格式化输出。</li>
<li>换行输出：在print输出语句中，如果有\n，那么\n后的内容会在另一行显示。</li>
</ul>
<p>python2和python3里输出语句的区别：</p>
<p>​    在python3中print只能使用函数的方式使用，而在python2中print可以当作一个命令来使用。</p>
<h2 id="1-8-输入语句"><a href="#1-8-输入语句" class="headerlink" title="1.8 输入语句"></a>1.8 输入语句</h2><p>在python中，我们使用input（）函数来获取用户的输入，将其值赋值给等号右边的变量中。值得注意的是，input（）会把用户的输入作为字符串来对待。</p>
<p>python2和python3的区别：</p>
<p>​    在python3里，用户输入的内容会被当作字符串进行处理，相当于python2中的raw_input功能。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python基本语法介绍</title>
    <url>/2020/06/18/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="2-python基本语法介绍"><a href="#2-python基本语法介绍" class="headerlink" title="2 python基本语法介绍"></a>2 python基本语法介绍</h1><h2 id="2-1-整数类型操作"><a href="#2-1-整数类型操作" class="headerlink" title="2.1 整数类型操作"></a>2.1 整数类型操作</h2><p>计算机存储和表示数据都用到二进制（0和1）来保存和表示数据，一个二进制表示一个比特（bit）。除了二进制，计算机还支持八进制和十六进制。在日常生活中，我们最长使用的是十进制。python语言支持二进制、八进制、十进制和十六进制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">12</span> <span class="comment"># 默认数字是十进制</span></span><br><span class="line">print(a + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">b = <span class="number">0b11101</span>   <span class="comment"># 以0b开头的数字是二进制</span></span><br><span class="line">print(b + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="number">0o12</span>  <span class="comment"># 以 0o 开头的数字是八进制</span></span><br><span class="line">print(c + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = <span class="number">0x1A</span>  <span class="comment"># 以 0x 开头的数字是十六进制</span></span><br><span class="line">print(d + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-1-1-进制转换"><a href="#2-1-1-进制转换" class="headerlink" title="2.1.1 进制转换"></a>2.1.1 进制转换</h3><p>不同进制的数字之间可以通过一定的计算规则相互转化。</p>
<ul>
<li>转换成二进制使用<code>bin()</code></li>
<li>转换成八进制使用<code>oct()</code></li>
<li>转换成十六进制使用<code>hex()</code></li>
</ul>
<h2 id="2-2-数据类型的转换"><a href="#2-2-数据类型的转换" class="headerlink" title="2.2 数据类型的转换"></a>2.2 数据类型的转换</h2><ul>
<li>转换成整数<code>int()</code></li>
<li>转换成浮点数<code>float()</code></li>
<li>转换成字符串<code>str()</code></li>
<li>转换成布尔值<code>bool()</code></li>
</ul>
<p>在python中，只有空字符串‘’，“”，数字0，空字典{}，空列表[]，空元组（）和空数据None会被转换成为False，其他都会被转换成True。</p>
<p>在python中，取消了长整型，双精度浮点型的数据类型。</p>
<h2 id="2-3-算术运算符"><a href="#2-3-算术运算符" class="headerlink" title="2.3 算术运算符"></a>2.3 算术运算符</h2><table>
<thead>
<tr>
<th align="center">运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td>加</td>
<td>a+b，将两个对象相加</td>
</tr>
<tr>
<td align="center">-</td>
<td>减</td>
<td>a-b，将两个对象相减</td>
</tr>
<tr>
<td align="center">*</td>
<td>乘</td>
<td>a*b，将两个对象相乘</td>
</tr>
<tr>
<td align="center">/</td>
<td>除</td>
<td>a/b，将两个对象相除</td>
</tr>
<tr>
<td align="center">//</td>
<td>整除</td>
<td>a//b，返回商的整数部分，9//2 = 4 ， 9.0//2.0 = 4.0</td>
</tr>
<tr>
<td align="center">%</td>
<td>取余</td>
<td>a%b，返回除法的余数，9%2 = 1</td>
</tr>
<tr>
<td align="center">**</td>
<td>指数</td>
<td>a**b，a的b次方</td>
</tr>
<tr>
<td align="center">（）</td>
<td>小括号</td>
<td>提高运算符的优先级</td>
</tr>
</tbody></table>
<p>在混合运算时，优先级顺序为：指数高于*/%//高于+ -，为了避免歧义，建议使用（）来处理运算符的优先级。并且，不同类型的数据在进行混合运算时，整数会自动转换成浮点数进行运算。</p>
<h3 id="2-3-1-算数运算符在字符串里的使用"><a href="#2-3-1-算数运算符在字符串里的使用" class="headerlink" title="2.3.1 算数运算符在字符串里的使用"></a>2.3.1 算数运算符在字符串里的使用</h3><ul>
<li>如果是两个字符串做加法运算，会直接把这两个字符串拼接成一个字符串。</li>
<li>如果是数字和字符串做加法运算，会直接报错。需要讲数字转换成字符串，然后做加法运算。</li>
<li>如果是数字和字符串做乘法运算，会将这个字符串重复多次。</li>
</ul>
<h2 id="2-4-赋值运算符"><a href="#2-4-赋值运算符" class="headerlink" title="2.4 赋值运算符"></a>2.4 赋值运算符</h2><ul>
<li>基本赋值运算符 <code>=</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 单个变量赋值</span><br><span class="line">&gt;&gt;&gt; num &#x3D; 10</span><br><span class="line">&gt;&gt;&gt; num</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line"># 同时为多个变量赋值(使用等号连接)</span><br><span class="line">&gt;&gt;&gt; a &#x3D; b &#x3D; 4</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"># 多个变量赋值(使用逗号分隔),python独有的语法</span><br><span class="line">&gt;&gt;&gt; num1, f1, str1 &#x3D; 100, 3.14, &quot;hello&quot; </span><br><span class="line">&gt;&gt;&gt; num1</span><br><span class="line">100</span><br><span class="line">&gt;&gt;&gt; f1</span><br><span class="line">3.14</span><br><span class="line">&gt;&gt;&gt; str1</span><br><span class="line">&quot;hello&quot;</span><br><span class="line"></span><br><span class="line"># 语法错误，值的个数超过变量的个数，赋值失败</span><br><span class="line">&gt;&gt;&gt; num1,num2&#x3D;(1,2,3)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: too many values to unpack (expected 2)</span><br><span class="line"></span><br><span class="line"># 语法错误，变量的个数超过值得个数，赋值失败</span><br><span class="line">&gt;&gt;&gt; num1,num2,num3,num4&#x3D;(1,2,3)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: not enough values to unpack (expected 4, got 3)</span><br></pre></td></tr></table></figure>

<ul>
<li>复合赋值运算符</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>+=</td>
<td>加法赋值运算符</td>
</tr>
<tr>
<td>-=</td>
<td>减法赋值运算符</td>
</tr>
<tr>
<td>*=</td>
<td>乘法赋值运算符</td>
</tr>
<tr>
<td>/=</td>
<td>除法赋值运算符</td>
</tr>
<tr>
<td>//</td>
<td>取整除赋值运算符</td>
</tr>
<tr>
<td>%=</td>
<td>取模赋值运算符</td>
</tr>
<tr>
<td>**=</td>
<td>幂赋值运算符</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例：+=</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a += <span class="number">1</span>  <span class="comment"># 相当于执行 a = a + 1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">101</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：*=</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a *= <span class="number">2</span>  <span class="comment"># 相当于执行 a = a * 2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：*=，运算时，符号右侧的表达式先计算出结果，再与左边变量的值运算</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a *= <span class="number">1</span> + <span class="number">2</span>  <span class="comment"># 相当于执行 a = a * (1+2)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">300</span></span><br></pre></td></tr></table></figure>

<p>注意：赋值运算符自右向左运算，将等号右边的值赋给等号左边，所以，等号的左边一定不能是常量或者表达式。</p>
<h2 id="2-5-比较运算符"><a href="#2-5-比较运算符" class="headerlink" title="2.5 比较运算符"></a>2.5 比较运算符</h2><p>比较运算符的结果是一个布尔值。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>等于</td>
</tr>
<tr>
<td>！=</td>
<td>不等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于（在python2中可以使用）</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt; =</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt; =</td>
<td>小于等于</td>
</tr>
</tbody></table>
<h3 id="2-5-1-字符串使用比较运算符"><a href="#2-5-1-字符串使用比较运算符" class="headerlink" title="2.5.1 字符串使用比较运算符"></a>2.5.1 字符串使用比较运算符</h3><ul>
<li>数字和字符串做 == 运算符结果是False，除了 == 运算符以外的逻辑运算时，会直接报错。</li>
<li>如果两个字符串进行比较，会将每个字符都转换成对应得编码，然后逐一进行比较。</li>
</ul>
<h2 id="2-6-逻辑运算符"><a href="#2-6-逻辑运算符" class="headerlink" title="2.6 逻辑运算符"></a>2.6 逻辑运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>逻辑表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>x and y</td>
<td>只要有一个运算数是False，结果就是False；只有所有的运算数都是True时，结果才是True；做取值运算时，取第一个为False的值，如果所有的值都是True，取最后一个值</td>
</tr>
<tr>
<td>or</td>
<td>x or y</td>
<td>只要有一个运算数是True，结果就是True；只有所有的运算数都是False时，结果才是False；做取值运算时，取第一个为True的值，如果所有的值都是False，取最后一个值</td>
</tr>
<tr>
<td>not</td>
<td>not x</td>
<td>布尔“非”，如果x为True，返回False；如果x为False，返回True</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">34</span></span><br><span class="line">b = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">print((a &gt; b) <span class="keyword">and</span> (b &gt; <span class="number">10</span>) <span class="keyword">and</span> (a &gt; <span class="number">30</span>) <span class="keyword">and</span> (a &gt; <span class="number">50</span>)) </span><br><span class="line">print((a &gt; b) <span class="keyword">and</span> (b &gt; <span class="number">10</span>) <span class="keyword">and</span> (a &gt; <span class="number">30</span>) <span class="keyword">and</span> (a &lt; <span class="number">50</span>)) </span><br><span class="line">print(a <span class="keyword">and</span> b <span class="keyword">and</span> <span class="string">'hello'</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">123</span>)</span><br><span class="line">print(a <span class="keyword">and</span> b <span class="keyword">and</span> <span class="string">'hello'</span> <span class="keyword">and</span> <span class="number">123</span> <span class="keyword">and</span> <span class="string">'hi'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print((a &gt; <span class="number">50</span>) <span class="keyword">or</span> (b &lt; <span class="number">10</span>) <span class="keyword">or</span> a &gt; b <span class="keyword">or</span> (a == b))</span><br><span class="line">print((a &gt; <span class="number">50</span>) <span class="keyword">or</span> (b &lt; <span class="number">10</span>) <span class="keyword">or</span> a &lt; b <span class="keyword">or</span> (a == b))</span><br><span class="line">print(<span class="number">0</span> <span class="keyword">or</span> <span class="literal">None</span> <span class="keyword">or</span> a <span class="keyword">or</span> <span class="string">''</span>)</span><br><span class="line">print(<span class="number">0</span> <span class="keyword">or</span> <span class="string">""</span> <span class="keyword">or</span> <span class="string">''</span> <span class="keyword">or</span> <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">34</span></span><br><span class="line"></span><br><span class="line">a &gt; <span class="number">10</span> <span class="keyword">and</span> print(<span class="string">'hello world'</span>) <span class="comment">#hello world</span></span><br><span class="line">a &lt; <span class="number">10</span> <span class="keyword">and</span> print(<span class="string">'hello world'</span>) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">a &gt;<span class="number">10</span> <span class="keyword">or</span> print(<span class="string">'你好世界'</span>)<span class="comment">#True</span></span><br><span class="line">a &lt;<span class="number">10</span> <span class="keyword">or</span> print(<span class="string">'你好世界'</span>)<span class="comment">#hello world</span></span><br></pre></td></tr></table></figure>



<h2 id="2-7-位运算符（了解）"><a href="#2-7-位运算符（了解）" class="headerlink" title="2.7 位运算符（了解）"></a>2.7 位运算符（了解）</h2><p>安位运算符是把数字看作二进制来进行计算的。</p>
<p>a 为60，b为13.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0011</span> <span class="number">1100</span>  <span class="comment"># 60的二进制</span></span><br><span class="line">b = <span class="number">0000</span> <span class="number">1101</span>  <span class="comment"># 13的二进制</span></span><br><span class="line">-----------------</span><br><span class="line">a&amp;b = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">a|b = <span class="number">0011</span> <span class="number">1101</span></span><br><span class="line">a^b = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">~a  = <span class="number">1100</span> <span class="number">0011</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>运算</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>按位与运算：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>
<td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td>
</tr>
<tr>
<td>|</td>
<td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1</td>
<td>(a|b)输出结果61，二进制解释：0011 1101</td>
</tr>
<tr>
<td>^</td>
<td>按位异或运算符：当两对应的二进位相异时，结果为1</td>
<td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td>
</tr>
<tr>
<td>~</td>
<td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1</td>
<td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移动运算符：运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补0</td>
<td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，<strong>&gt;&gt;</strong> 右边的数字指定了移动的位数</td>
<td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td>
</tr>
</tbody></table>
<p>练习：</p>
<ul>
<li>使用位运算，获取到十六进制颜色 <code>0xF0384E</code> 的RGB值，以十进制形式打印输出。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">color = <span class="number">0xF0384E</span></span><br><span class="line">red = color &gt;&gt; <span class="number">16</span></span><br><span class="line">green = (color &amp; <span class="number">0x00FF00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">blue = color &amp; <span class="number">0x0000FF</span></span><br></pre></td></tr></table></figure>



<h2 id="2-8-运算符的优先级"><a href="#2-8-运算符的优先级" class="headerlink" title="2.8 运算符的优先级"></a>2.8 运算符的优先级</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>**</td>
<td>指数 (最高优先级)</td>
</tr>
<tr>
<td>~ + -</td>
<td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr>
<td>* / % //</td>
<td>乘，除，取模和取整除</td>
</tr>
<tr>
<td>+ -</td>
<td>加法减法</td>
</tr>
<tr>
<td>&gt;&gt; &lt;&lt;</td>
<td>右移，左移运算符</td>
</tr>
<tr>
<td>&amp;</td>
<td>位 ‘AND’</td>
</tr>
<tr>
<td>^ |</td>
<td>位运算符</td>
</tr>
<tr>
<td>&lt;= &lt; &gt; &gt;=</td>
<td>比较运算符</td>
</tr>
<tr>
<td>&lt;&gt; == !=</td>
<td>等于运算符</td>
</tr>
<tr>
<td>= %= /= //= -= += <em>= *</em>=</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>is ，is not</td>
<td>身份运算符</td>
</tr>
<tr>
<td>in ，not in</td>
<td>成员运算符</td>
</tr>
<tr>
<td>not&gt;and&gt;or</td>
<td>逻辑运算符</td>
</tr>
</tbody></table>
<p>在以后的实际开发中，如果有多种运算符进行混合运算时，<strong>强烈建议使用小括号来手动的控制运算符的优先级！</strong></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
</search>
